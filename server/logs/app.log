{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 02:27:19'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 02:27:19'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 02:27:26'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 02:27:26'
}
{
  status: 404,
  message: 'User does not exist User does not exist',
  level: 'error',
  timestamp: '2024-12-05 02:27:33'
}
{
  status: 400,
  message: 'Invalid Credentials Invalid Credentials',
  level: 'error',
  timestamp: '2024-12-05 02:27:43'
}
{
  status: 400,
  message: 'Invalid Credentials Invalid Credentials',
  level: 'error',
  timestamp: '2024-12-05 02:28:20'
}
{
  status: 404,
  message: 'User does not exist User does not exist',
  level: 'error',
  timestamp: '2024-12-05 02:28:50'
}
{
  status: 404,
  message: 'User does not exist User does not exist',
  level: 'error',
  timestamp: '2024-12-05 02:29:28'
}
{
  status: 404,
  message: 'User does not exist User does not exist',
  level: 'error',
  timestamp: '2024-12-05 02:29:51'
}
{
  status: 404,
  message: 'User does not exist User does not exist',
  level: 'error',
  timestamp: '2024-12-05 02:29:53'
}
{
  status: 404,
  message: 'User does not exist User does not exist',
  level: 'error',
  timestamp: '2024-12-05 02:29:54'
}
{
  status: 400,
  message: 'Invalid Credentials Invalid Credentials',
  level: 'error',
  timestamp: '2024-12-05 02:29:59'
}
{
  status: 400,
  message: 'Invalid Credentials Invalid Credentials',
  level: 'error',
  timestamp: '2024-12-05 02:30:09'
}
{
  status: 400,
  message: 'Invalid Credentials Invalid Credentials',
  level: 'error',
  timestamp: '2024-12-05 02:30:20'
}
{
  status: 400,
  message: 'Invalid Credentials Invalid Credentials',
  level: 'error',
  timestamp: '2024-12-05 02:30:26'
}
{
  status: 404,
  message: 'User does not exist User does not exist',
  level: 'error',
  timestamp: '2024-12-05 02:35:58'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 02:36:20'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 02:36:20'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 15:50:37'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 15:50:37'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:51:15'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:51:16'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:51:18'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:51:22'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:51:27'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:51:32'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:51:37'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:51:42'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:51:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:51:52'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:51:57'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:52:02'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:52:07'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:52:12'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:52:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:52:22'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:52:27'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:52:32'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:52:37'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:52:42'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:52:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:52:52'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:52:57'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:53:02'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:53:07'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:53:12'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:53:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:53:22'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:53:27'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:53:32'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:53:37'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:53:42'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:53:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:53:52'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:53:57'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:54:02'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:54:07'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:54:12'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:54:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:54:22'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:54:27'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:54:32'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:54:37'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:54:42'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:54:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:54:52'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:54:57'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:55:02'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:55:07'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:55:12'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:55:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:55:22'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:55:27'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:55:32'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:55:37'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:55:42'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:55:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:55:52'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:55:57'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:56:02'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:56:07'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 15:56:10'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 15:56:10'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:56:12'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:56:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:56:22'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:56:27'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:56:32'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:56:37'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:56:42'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:56:47'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 15:56:52'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 15:56:52'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:56:52'
}
{
  status: 400,
  message: 'Invalid Credentials Invalid Credentials',
  level: 'error',
  timestamp: '2024-12-05 15:57:10'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:57:14'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:57:16'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:57:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:57:20'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:57:25'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:57:30'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:57:35'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:57:40'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 15:57:44'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 15:57:44'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:57:45'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:57:50'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:57:55'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:58:00'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:58:05'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:58:10'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:58:15'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:58:20'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 15:58:25'
}
{
  level: 'error',
  message: 'data and hash arguments required data and hash arguments required',
  stack: 'Error: data and hash arguments required\n' +
    '    at Object.compare (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bcrypt\\bcrypt.js:208:17)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bcrypt\\promises.js:29:12\n' +
    '    at new Promise (<anonymous>)\n' +
    '    at module.exports.promise (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bcrypt\\promises.js:20:12)\n' +
    '    at Object.compare (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bcrypt\\bcrypt.js:204:25)\n' +
    '    at validatePassword (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\utils\\password.js:10:32)\n' +
    '    at loginUser (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\auth.js:75:25)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)',
  timestamp: '2024-12-05 15:58:38'
}
{
  level: 'error',
  message: 'data and hash arguments required data and hash arguments required',
  stack: 'Error: data and hash arguments required\n' +
    '    at Object.compare (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bcrypt\\bcrypt.js:208:17)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bcrypt\\promises.js:29:12\n' +
    '    at new Promise (<anonymous>)\n' +
    '    at module.exports.promise (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bcrypt\\promises.js:20:12)\n' +
    '    at Object.compare (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bcrypt\\bcrypt.js:204:25)\n' +
    '    at validatePassword (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\utils\\password.js:10:32)\n' +
    '    at loginUser (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\auth.js:75:25)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)',
  timestamp: '2024-12-05 15:58:42'
}
{
  level: 'error',
  message: 'data and hash arguments required data and hash arguments required',
  stack: 'Error: data and hash arguments required\n' +
    '    at Object.compare (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bcrypt\\bcrypt.js:208:17)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bcrypt\\promises.js:29:12\n' +
    '    at new Promise (<anonymous>)\n' +
    '    at module.exports.promise (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bcrypt\\promises.js:20:12)\n' +
    '    at Object.compare (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bcrypt\\bcrypt.js:204:25)\n' +
    '    at validatePassword (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\utils\\password.js:10:32)\n' +
    '    at loginUser (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\auth.js:75:25)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)',
  timestamp: '2024-12-05 15:58:50'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 16:00:00'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 16:00:00'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:00:03'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:00:04'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:00:06'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:00:10'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:09:28'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:09:29'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:09:31'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:09:35'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:09:40'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:09:45'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:09:50'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:09:55'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:10:00'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 16:10:06'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 16:10:06'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:10:06'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:10:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:10:16'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:10:21'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:10:26'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:10:31'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:10:36'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:10:41'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:10:46'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:10:51'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:10:56'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:11:01'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:11:06'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:11:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:11:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:11:23'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:11:29'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:11:34'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:11:39'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:11:44'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:11:49'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 16:11:54'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 16:11:54'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:11:54'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:11:59'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:12:05'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:12:10'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:12:15'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:12:20'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:12:25'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:12:30'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:12:35'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 16:12:39'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 16:12:39'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:12:40'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:12:45'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:12:50'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:12:55'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:13:00'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:13:05'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:13:10'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:13:15'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:13:20'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:13:25'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:13:30'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:13:35'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:13:41'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:13:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:13:53'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:13:59'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:14:05'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:14:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:14:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:14:23'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:14:29'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:14:35'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:14:41'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:14:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:14:53'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:14:59'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:15:05'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:15:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:15:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:15:23'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:15:29'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:15:35'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:15:41'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:15:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:15:53'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:15:59'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:16:05'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:16:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:16:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:16:23'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:16:29'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:16:35'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:16:41'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:16:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:16:53'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:16:59'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:17:05'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:17:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:17:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:17:23'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:17:29'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:17:35'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:17:41'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:17:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:17:53'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:17:59'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 16:18:02'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 16:18:02'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:18:05'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 16:18:08'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 16:18:08'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:18:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:18:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:18:23'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:18:29'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:18:35'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:18:41'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:18:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:18:53'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:18:59'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:19:05'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:19:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:19:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:19:23'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:19:29'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:19:35'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:19:41'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:19:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:19:53'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:19:59'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:20:05'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:20:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:20:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:20:23'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:20:29'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:20:35'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:20:41'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:20:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:20:53'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:20:59'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:21:05'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:21:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:21:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:21:23'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:21:29'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:21:35'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:21:41'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:21:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:21:53'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:21:59'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:22:05'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:22:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:22:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:22:23'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:22:29'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:22:35'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:22:41'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:22:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:22:53'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:22:59'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:23:05'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:23:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:23:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:23:23'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:23:29'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:23:35'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:23:41'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:23:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:23:53'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:23:59'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:24:05'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:24:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:24:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:24:23'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:24:29'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:24:35'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:24:41'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:24:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:24:53'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:24:59'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:25:05'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:25:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:25:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:25:23'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:25:29'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:25:35'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:25:41'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:25:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:25:53'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:25:59'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:26:05'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:26:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:26:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:26:23'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:26:29'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:26:35'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:26:41'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:26:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:26:53'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:26:59'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:27:05'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:27:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:27:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:27:23'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:27:29'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:27:35'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:27:41'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:27:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:27:53'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:27:59'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:28:05'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 16:28:12'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 16:28:12'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:28:12'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:28:17'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 16:28:21'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 16:28:21'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 16:28:23'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 16:28:26'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 16:28:29'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 16:29:23'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:01:44'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:01:52'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:04:41'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 17:16:51'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:16:51'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 17:16:58'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:16:58'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:17:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:17:48'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:17:50'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:17:54'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:17:59'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:18:04'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:18:09'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:18:14'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:18:19'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:18:24'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:18:29'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:18:34'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:18:39'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:18:45'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:18:51'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:18:57'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:19:03'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:19:09'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:19:15'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:19:21'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:19:27'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:19:33'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:19:39'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:19:45'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:19:51'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:19:57'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:20:03'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:20:09'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:20:15'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:20:21'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:20:27'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:20:33'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:20:39'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:20:45'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:20:51'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:20:57'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:21:03'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:21:09'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:21:15'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:21:21'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:21:28'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 17:21:30'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:21:30'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:21:30'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:21:35'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:21:41'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:21:47'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:21:53'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:21:59'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:22:05'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:22:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:22:17'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:22:23'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:22:28'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 17:22:34'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:22:34'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:23:50'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:23:52'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:23:53'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:23:58'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:24:03'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:24:08'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:24:13'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:24:18'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:24:23'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:24:28'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:24:33'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:24:39'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:24:45'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:24:51'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:24:57'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:25:03'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:25:09'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:25:15'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:25:21'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:25:27'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:25:33'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:25:39'
}
{
  message: 'Listening on PORT: 5001!',
  level: 'info',
  timestamp: '2024-12-05 17:25:46'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:25:46'
}
{
  message: 'Listening on PORT: 5001!',
  level: 'info',
  timestamp: '2024-12-05 17:25:47'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:25:47'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 17:26:24'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:26:24'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:26:24'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:26:26'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:26:32'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:26:38'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:26:44'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:26:50'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:26:56'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:27:02'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:27:08'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:27:14'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:27:20'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:27:26'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:27:32'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:27:38'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:27:44'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:27:50'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:27:56'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:28:02'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:28:08'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:28:14'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:28:20'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 17:28:26'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 17:28:33'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:28:33'
}
{
  status: 400,
  message: 'Invalid Credentials Invalid Credentials',
  level: 'error',
  timestamp: '2024-12-05 17:28:48'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 17:35:12'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:35:12'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 17:39:08'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:39:08'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 17:39:26'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:39:26'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 17:39:39'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:39:39'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 17:41:12'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:41:12'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 17:48:40'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:48:40'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 17:52:09'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:52:09'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 17:52:54'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:52:54'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 17:53:51'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:53:51'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 17:55:23'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 17:55:23'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 18:12:25'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 18:12:25'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 18:12:37'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 18:12:37'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 18:14:20'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 18:14:22'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 18:14:30'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 18:14:31'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 18:14:32'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 18:14:35'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 18:15:30'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 18:15:30'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 18:15:41'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 18:15:41'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 18:36:25'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 18:36:25'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 19:09:03'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 19:09:03'
}
{
  status: 404,
  message: 'User does not exist User does not exist',
  level: 'error',
  timestamp: '2024-12-05 19:30:32'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 20:41:58'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 20:41:58'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 20:44:02'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 20:44:02'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 20:46:39'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 20:46:39'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 20:47:50'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 20:48:44'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 20:50:18'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 20:50:39'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-05 21:19:00'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 21:19:22'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 21:19:22'
}
{
  errors: {
    content: CastError: Cast to string failed for value "{}" (type Object) at path "content"
        at SchemaString.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\string.js:606:11)
        at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
        at model.$set (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:1422:22)
        at model.$set (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:1119:16)
        at model.Document (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:165:12)
        at model.Model (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\model.js:123:12)
        at new model (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\model.js:4758:15)
        at C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\model.js:2922:18
        at Array.map (<anonymous>)
        at Function.create (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\model.js:2911:30) {
      stringValue: '"{}"',
      messageFormat: undefined,
      kind: 'string',
      value: {},
      path: 'content',
      reason: null,
      valueType: 'Object'
    },
    sentBy: ValidatorError: Path `sentBy` is required.
        at validate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1365:13)
        at SchemaType.doValidate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1349:7)
        at C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:3004:18
        at process.processTicksAndRejections (node:internal/process/task_queues:77:11) {
      properties: {
        validator: [Function (anonymous)],
        message: 'Path `sentBy` is required.',
        type: 'required',
        path: 'sentBy',
        fullPath: undefined,
        value: undefined
      },
      kind: 'required',
      path: 'sentBy',
      value: undefined,
      reason: undefined,
      [Symbol(mongoose:validatorError)]: true
    }
  },
  _message: 'Message validation failed',
  level: 'error',
  message: 'Message validation failed: content: Cast to string failed for value "{}" (type Object) at path "content", sentBy: Path `sentBy` is required. Message validation failed: content: Cast to string failed for value "{}" (type Object) at path "content", sentBy: Path `sentBy` is required.',
  stack: 'ValidationError: Message validation failed: content: Cast to string failed for value "{}" (type Object) at path "content", sentBy: Path `sentBy` is required.\n' +
    '    at Document.invalidate (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:3219:32)\n' +
    '    at model.$set (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:1464:12)\n' +
    '    at model.$set (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:1119:16)\n' +
    '    at model.Document (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:165:12)\n' +
    '    at model.Model (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\model.js:123:12)\n' +
    '    at new model (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\model.js:4758:15)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\model.js:2922:18\n' +
    '    at Array.map (<anonymous>)\n' +
    '    at Function.create (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\model.js:2911:30)\n' +
    '    at createMessage (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\messages.js:20:33)',
  timestamp: '2024-12-05 21:19:23'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 21:20:09'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 21:20:09'
}
{
  errors: {
    content: CastError: Cast to string failed for value "{}" (type Object) at path "content"
        at SchemaString.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\string.js:606:11)
        at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
        at model.$set (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:1422:22)
        at model.$set (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:1119:16)
        at model.Document (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:165:12)
        at model.Model (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\model.js:123:12)
        at new model (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\model.js:4758:15)
        at C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\model.js:2922:18
        at Array.map (<anonymous>)
        at Function.create (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\model.js:2911:30) {
      stringValue: '"{}"',
      messageFormat: undefined,
      kind: 'string',
      value: {},
      path: 'content',
      reason: null,
      valueType: 'Object'
    },
    sentBy: ValidatorError: Path `sentBy` is required.
        at validate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1365:13)
        at SchemaType.doValidate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1349:7)
        at C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:3004:18
        at process.processTicksAndRejections (node:internal/process/task_queues:77:11) {
      properties: {
        validator: [Function (anonymous)],
        message: 'Path `sentBy` is required.',
        type: 'required',
        path: 'sentBy',
        fullPath: undefined,
        value: undefined
      },
      kind: 'required',
      path: 'sentBy',
      value: undefined,
      reason: undefined,
      [Symbol(mongoose:validatorError)]: true
    }
  },
  _message: 'Message validation failed',
  level: 'error',
  message: 'Message validation failed: content: Cast to string failed for value "{}" (type Object) at path "content", sentBy: Path `sentBy` is required. Message validation failed: content: Cast to string failed for value "{}" (type Object) at path "content", sentBy: Path `sentBy` is required.',
  stack: 'ValidationError: Message validation failed: content: Cast to string failed for value "{}" (type Object) at path "content", sentBy: Path `sentBy` is required.\n' +
    '    at Document.invalidate (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:3219:32)\n' +
    '    at model.$set (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:1464:12)\n' +
    '    at model.$set (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:1119:16)\n' +
    '    at model.Document (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:165:12)\n' +
    '    at model.Model (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\model.js:123:12)\n' +
    '    at new model (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\model.js:4758:15)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\model.js:2922:18\n' +
    '    at Array.map (<anonymous>)\n' +
    '    at Function.create (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\model.js:2911:30)\n' +
    '    at createMessage (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\messages.js:22:33)',
  timestamp: '2024-12-05 21:20:12'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 21:21:05'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 21:21:05'
}
{
  errors: {
    content: CastError: Cast to string failed for value "{}" (type Object) at path "content"
        at SchemaString.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\string.js:606:11)
        at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
        at model.$set (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:1422:22)
        at model.$set (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:1119:16)
        at model.Document (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:165:12)
        at model.Model (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\model.js:123:12)
        at new model (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\model.js:4758:15)
        at C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\model.js:2922:18
        at Array.map (<anonymous>)
        at Function.create (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\model.js:2911:30) {
      stringValue: '"{}"',
      messageFormat: undefined,
      kind: 'string',
      value: {},
      path: 'content',
      reason: null,
      valueType: 'Object'
    },
    sentBy: ValidatorError: Path `sentBy` is required.
        at validate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1365:13)
        at SchemaType.doValidate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1349:7)
        at C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:3004:18
        at process.processTicksAndRejections (node:internal/process/task_queues:77:11) {
      properties: {
        validator: [Function (anonymous)],
        message: 'Path `sentBy` is required.',
        type: 'required',
        path: 'sentBy',
        fullPath: undefined,
        value: undefined
      },
      kind: 'required',
      path: 'sentBy',
      value: undefined,
      reason: undefined,
      [Symbol(mongoose:validatorError)]: true
    }
  },
  _message: 'Message validation failed',
  level: 'error',
  message: 'Message validation failed: content: Cast to string failed for value "{}" (type Object) at path "content", sentBy: Path `sentBy` is required. Message validation failed: content: Cast to string failed for value "{}" (type Object) at path "content", sentBy: Path `sentBy` is required.',
  stack: 'ValidationError: Message validation failed: content: Cast to string failed for value "{}" (type Object) at path "content", sentBy: Path `sentBy` is required.\n' +
    '    at Document.invalidate (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:3219:32)\n' +
    '    at model.$set (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:1464:12)\n' +
    '    at model.$set (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:1119:16)\n' +
    '    at model.Document (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:165:12)\n' +
    '    at model.Model (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\model.js:123:12)\n' +
    '    at new model (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\model.js:4758:15)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\model.js:2922:18\n' +
    '    at Array.map (<anonymous>)\n' +
    '    at Function.create (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\model.js:2911:30)\n' +
    '    at createMessage (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\messages.js:22:33)',
  timestamp: '2024-12-05 21:21:08'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 21:21:41'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 21:21:41'
}
{
  errors: {
    sentBy: ValidatorError: Path `sentBy` is required.
        at validate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1365:13)
        at SchemaType.doValidate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1349:7)
        at C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:3004:18
        at process.processTicksAndRejections (node:internal/process/task_queues:77:11) {
      properties: {
        validator: [Function (anonymous)],
        message: 'Path `sentBy` is required.',
        type: 'required',
        path: 'sentBy',
        fullPath: undefined,
        value: undefined
      },
      kind: 'required',
      path: 'sentBy',
      value: undefined,
      reason: undefined,
      [Symbol(mongoose:validatorError)]: true
    }
  },
  _message: 'Message validation failed',
  level: 'error',
  message: 'Message validation failed: sentBy: Path `sentBy` is required. Message validation failed: sentBy: Path `sentBy` is required.',
  stack: 'ValidationError: Message validation failed: sentBy: Path `sentBy` is required.\n' +
    '    at Document.invalidate (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:3219:32)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:3012:17\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1368:9\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)',
  timestamp: '2024-12-05 21:21:57'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 21:22:11'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 21:22:11'
}
{
  errors: {
    sentBy: ValidatorError: Path `sentBy` is required.
        at validate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1365:13)
        at SchemaType.doValidate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1349:7)
        at C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:3004:18
        at process.processTicksAndRejections (node:internal/process/task_queues:77:11) {
      properties: {
        validator: [Function (anonymous)],
        message: 'Path `sentBy` is required.',
        type: 'required',
        path: 'sentBy',
        fullPath: undefined,
        value: undefined
      },
      kind: 'required',
      path: 'sentBy',
      value: undefined,
      reason: undefined,
      [Symbol(mongoose:validatorError)]: true
    }
  },
  _message: 'Message validation failed',
  level: 'error',
  message: 'Message validation failed: sentBy: Path `sentBy` is required. Message validation failed: sentBy: Path `sentBy` is required.',
  stack: 'ValidationError: Message validation failed: sentBy: Path `sentBy` is required.\n' +
    '    at Document.invalidate (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:3219:32)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:3012:17\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1368:9\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)',
  timestamp: '2024-12-05 21:22:11'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 21:22:33'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 21:22:33'
}
{
  errors: {
    sentBy: ValidatorError: Path `sentBy` is required.
        at validate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1365:13)
        at SchemaType.doValidate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1349:7)
        at C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:3004:18
        at process.processTicksAndRejections (node:internal/process/task_queues:77:11) {
      properties: {
        validator: [Function (anonymous)],
        message: 'Path `sentBy` is required.',
        type: 'required',
        path: 'sentBy',
        fullPath: undefined,
        value: undefined
      },
      kind: 'required',
      path: 'sentBy',
      value: undefined,
      reason: undefined,
      [Symbol(mongoose:validatorError)]: true
    }
  },
  _message: 'Message validation failed',
  level: 'error',
  message: 'Message validation failed: sentBy: Path `sentBy` is required. Message validation failed: sentBy: Path `sentBy` is required.',
  stack: 'ValidationError: Message validation failed: sentBy: Path `sentBy` is required.\n' +
    '    at Document.invalidate (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:3219:32)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:3012:17\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1368:9\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)',
  timestamp: '2024-12-05 21:22:35'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 21:23:14'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 21:23:14'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 21:29:14'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 21:29:14'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 21:30:22'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 21:30:22'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 21:32:04'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 21:32:04'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 21:36:24'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 21:36:24'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 21:52:37'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 21:52:37'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-05 22:01:57'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-05 22:01:57'
}
{
  errors: {
    content: ValidatorError: Path `content` is required.
        at validate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1365:13)
        at SchemaType.doValidate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1349:7)
        at C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:3004:18
        at process.processTicksAndRejections (node:internal/process/task_queues:77:11) {
      properties: {
        validator: [Function (anonymous)],
        message: 'Path `content` is required.',
        type: 'required',
        path: 'content',
        fullPath: undefined,
        value: ''
      },
      kind: 'required',
      path: 'content',
      value: '',
      reason: undefined,
      [Symbol(mongoose:validatorError)]: true
    }
  },
  _message: 'Message validation failed',
  level: 'error',
  message: 'Message validation failed: content: Path `content` is required. Message validation failed: content: Path `content` is required.',
  stack: 'ValidationError: Message validation failed: content: Path `content` is required.\n' +
    '    at Document.invalidate (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:3219:32)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:3012:17\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1368:9\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)',
  timestamp: '2024-12-05 22:04:19'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-06 01:46:34'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-06 01:46:34'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 20:39:35'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 20:39:35'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 21:34:25'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 21:34:25'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 21:39:36'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 21:39:36'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 21:39:42'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 21:39:42'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 21:40:06'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 21:40:06'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 21:47:08'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 21:47:08'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 21:47:49'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 21:47:49'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 21:48:14'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 21:48:14'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 21:49:10'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 21:49:10'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 21:49:27'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 21:49:27'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 21:52:52'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 21:52:52'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 21:53:15'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 21:53:15'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 21:53:26'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 21:53:26'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 21:54:59'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 21:54:59'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 21:55:15'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 21:55:15'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 21:56:15'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 21:56:15'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 21:56:45'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 21:56:45'
}
{
  errors: {
    room: ValidatorError: Path `room` is required.
        at validate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1365:13)
        at SchemaType.doValidate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1349:7)
        at C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:3004:18
        at process.processTicksAndRejections (node:internal/process/task_queues:77:11) {
      properties: {
        validator: [Function (anonymous)],
        message: 'Path `room` is required.',
        type: 'required',
        path: 'room',
        fullPath: undefined,
        value: undefined
      },
      kind: 'required',
      path: 'room',
      value: undefined,
      reason: undefined,
      [Symbol(mongoose:validatorError)]: true
    }
  },
  _message: 'Message validation failed',
  level: 'error',
  message: 'Message validation failed: room: Path `room` is required. Message validation failed: room: Path `room` is required.',
  stack: 'ValidationError: Message validation failed: room: Path `room` is required.\n' +
    '    at Document.invalidate (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:3219:32)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:3012:17\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1368:9\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)',
  timestamp: '2024-12-26 21:57:28'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 21:59:24'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 21:59:24'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 22:07:01'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 22:07:01'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 22:07:10'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 22:07:10'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 22:07:16'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 22:07:16'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 22:08:36'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 22:08:36'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 22:09:30'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 22:09:30'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:11:48'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:11:48'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:13:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:13:13'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:13:19'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:13:19'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:13:24'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:13:24'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:13:32'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:13:32'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:14:00'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:14:00'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:14:04'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:14:04'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:14:22'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:14:25'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:15:13'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:15:13'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:15:14'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:15:14'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:15:37'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:15:37'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:15:58'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:15:58'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:16:01'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:21:26'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-26 22:21:26'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 22:22:12'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 22:22:12'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 22:22:34'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 22:22:34'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 22:23:05'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 22:23:05'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 22:23:15'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 22:23:15'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 23:07:14'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 23:07:14'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 23:08:30'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 23:08:30'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 23:09:54'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 23:09:54'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 23:11:21'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 23:11:21'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 23:11:50'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 23:11:50'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 23:13:11'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 23:13:11'
}
{
  stringValue: `"{ _id: '[object Object]' }"`,
  messageFormat: undefined,
  kind: 'ObjectId',
  value: { _id: '[object Object]' },
  path: '_id',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast\objectid.js:20:14)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast.js:318:34)
      at Query.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._findOne (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2533:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'Object',
  model: Model { Room },
  level: 'error',
  message: `Cast to ObjectId failed for value "{ _id: '[object Object]' }" (type Object) at path "_id" for model "Room" Cast to ObjectId failed for value "{ _id: '[object Object]' }" (type Object) at path "_id" for model "Room"`,
  stack: `CastError: Cast to ObjectId failed for value "{ _id: '[object Object]' }" (type Object) at path "_id" for model "Room"\n` +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\cast.js:318:34)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._findOne (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2533:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async joinRoom (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\rooms.js:21:16)',
  timestamp: '2024-12-26 23:21:06'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 23:23:38'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 23:23:38'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 23:23:40'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 23:23:40'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 23:29:09'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 23:29:09'
}
{
  errors: {
    joinedRoom: CastError: Cast to ObjectId failed for value "[object Object]" (type string) at path "joinedRoom" because of "BSONError"
        at ObjectId.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\objectid.js:250:11)
        at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
        at model.$set (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:1422:22)
        at model.$set (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:1119:16)
        at joinRoom (C:\Uni and Practise\html,css,js\chat-app\server\controllers\rooms.js:23:8)
        at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {
      stringValue: '"[object Object]"',
      messageFormat: undefined,
      kind: 'ObjectId',
      value: '[object Object]',
      path: 'joinedRoom',
      reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
          at new ObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\bson\lib\bson.cjs:2055:23)
          at castObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
          at ObjectId.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
          at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
          at model.$set (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:1422:22)
          at model.$set (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:1119:16)
          at joinRoom (C:\Uni and Practise\html,css,js\chat-app\server\controllers\rooms.js:23:8)
          at process.processTicksAndRejections (node:internal/process/task_queues:95:5),
      valueType: 'string'
    },
    name: ValidatorError: Path `name` (`Rose`) is shorter than the minimum allowed length (5).
        at validate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1365:13)
        at SchemaType.doValidate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1349:7)
        at C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:3004:18
        at process.processTicksAndRejections (node:internal/process/task_queues:77:11) {
      properties: {
        validator: [Function (anonymous)],
        message: 'Path `name` (`Rose`) is shorter than the minimum allowed length (5).',
        type: 'minlength',
        minlength: 5,
        path: 'name',
        fullPath: undefined,
        value: 'Rose'
      },
      kind: 'minlength',
      path: 'name',
      value: 'Rose',
      reason: undefined,
      [Symbol(mongoose:validatorError)]: true
    }
  },
  _message: 'User validation failed',
  level: 'error',
  message: 'User validation failed: joinedRoom: Cast to ObjectId failed for value "[object Object]" (type string) at path "joinedRoom" because of "BSONError", name: Path `name` (`Rose`) is shorter than the minimum allowed length (5). User validation failed: joinedRoom: Cast to ObjectId failed for value "[object Object]" (type string) at path "joinedRoom" because of "BSONError", name: Path `name` (`Rose`) is shorter than the minimum allowed length (5).',
  stack: 'ValidationError: User validation failed: joinedRoom: Cast to ObjectId failed for value "[object Object]" (type string) at path "joinedRoom" because of "BSONError", name: Path `name` (`Rose`) is shorter than the minimum allowed length (5).\n' +
    '    at Document.invalidate (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:3219:32)\n' +
    '    at model.$set (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:1464:12)\n' +
    '    at model.$set (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:1119:16)\n' +
    '    at joinRoom (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\rooms.js:23:8)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)',
  timestamp: '2024-12-26 23:29:17'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 23:31:11'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 23:31:11'
}
{
  errors: {
    joinedRoom: CastError: Cast to ObjectId failed for value "[object Object]" (type string) at path "joinedRoom" because of "BSONError"
        at ObjectId.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\objectid.js:250:11)
        at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
        at model.$set (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:1422:22)
        at model.$set (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:1119:16)
        at joinRoom (C:\Uni and Practise\html,css,js\chat-app\server\controllers\rooms.js:24:8)
        at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {
      stringValue: '"[object Object]"',
      messageFormat: undefined,
      kind: 'ObjectId',
      value: '[object Object]',
      path: 'joinedRoom',
      reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
          at new ObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\bson\lib\bson.cjs:2055:23)
          at castObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
          at ObjectId.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
          at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
          at model.$set (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:1422:22)
          at model.$set (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:1119:16)
          at joinRoom (C:\Uni and Practise\html,css,js\chat-app\server\controllers\rooms.js:24:8)
          at process.processTicksAndRejections (node:internal/process/task_queues:95:5),
      valueType: 'string'
    },
    name: ValidatorError: Path `name` (`Rose`) is shorter than the minimum allowed length (5).
        at validate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1365:13)
        at SchemaType.doValidate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1349:7)
        at C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:3004:18
        at process.processTicksAndRejections (node:internal/process/task_queues:77:11) {
      properties: {
        validator: [Function (anonymous)],
        message: 'Path `name` (`Rose`) is shorter than the minimum allowed length (5).',
        type: 'minlength',
        minlength: 5,
        path: 'name',
        fullPath: undefined,
        value: 'Rose'
      },
      kind: 'minlength',
      path: 'name',
      value: 'Rose',
      reason: undefined,
      [Symbol(mongoose:validatorError)]: true
    }
  },
  _message: 'User validation failed',
  level: 'error',
  message: 'User validation failed: joinedRoom: Cast to ObjectId failed for value "[object Object]" (type string) at path "joinedRoom" because of "BSONError", name: Path `name` (`Rose`) is shorter than the minimum allowed length (5). User validation failed: joinedRoom: Cast to ObjectId failed for value "[object Object]" (type string) at path "joinedRoom" because of "BSONError", name: Path `name` (`Rose`) is shorter than the minimum allowed length (5).',
  stack: 'ValidationError: User validation failed: joinedRoom: Cast to ObjectId failed for value "[object Object]" (type string) at path "joinedRoom" because of "BSONError", name: Path `name` (`Rose`) is shorter than the minimum allowed length (5).\n' +
    '    at Document.invalidate (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:3219:32)\n' +
    '    at model.$set (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:1464:12)\n' +
    '    at model.$set (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:1119:16)\n' +
    '    at joinRoom (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\rooms.js:24:8)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)',
  timestamp: '2024-12-26 23:31:20'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 23:31:52'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 23:31:52'
}
{
  level: 'error',
  message: 'Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer',
  stack: 'BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer\n' +
    '    at new ObjectId (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bson\\lib\\bson.cjs:2055:23)\n' +
    '    at joinRoom (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\rooms.js:24:26)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)',
  timestamp: '2024-12-26 23:31:57'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 23:32:10'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 23:32:10'
}
{
  level: 'error',
  message: 'Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer',
  stack: 'BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer\n' +
    '    at new ObjectId (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bson\\lib\\bson.cjs:2055:23)\n' +
    '    at joinRoom (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\rooms.js:24:26)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)',
  timestamp: '2024-12-26 23:34:49'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 23:35:15'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 23:35:15'
}
{
  level: 'error',
  message: 'Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer',
  stack: 'BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer\n' +
    '    at new ObjectId (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bson\\lib\\bson.cjs:2055:23)\n' +
    '    at joinRoom (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\rooms.js:26:26)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)',
  timestamp: '2024-12-26 23:35:28'
}
{
  level: 'error',
  message: 'Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer',
  stack: 'BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer\n' +
    '    at new ObjectId (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bson\\lib\\bson.cjs:2055:23)\n' +
    '    at joinRoom (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\rooms.js:26:26)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)',
  timestamp: '2024-12-26 23:36:08'
}
{
  level: 'error',
  message: 'Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer',
  stack: 'BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer\n' +
    '    at new ObjectId (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bson\\lib\\bson.cjs:2055:23)\n' +
    '    at joinRoom (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\rooms.js:26:26)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)',
  timestamp: '2024-12-26 23:37:02'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 23:37:26'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 23:37:26'
}
{
  level: 'error',
  message: 'Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer',
  stack: 'BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer\n' +
    '    at new ObjectId (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bson\\lib\\bson.cjs:2055:23)\n' +
    '    at joinRoom (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\rooms.js:26:26)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)',
  timestamp: '2024-12-26 23:37:26'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 23:38:21'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 23:38:21'
}
{
  level: 'error',
  message: 'Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer',
  stack: 'BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer\n' +
    '    at new ObjectId (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\bson\\lib\\bson.cjs:2055:23)\n' +
    '    at joinRoom (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\rooms.js:24:26)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)',
  timestamp: '2024-12-26 23:38:30'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 23:39:13'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 23:39:13'
}
{
  errors: {
    name: ValidatorError: Path `name` (`Rose`) is shorter than the minimum allowed length (5).
        at validate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1365:13)
        at SchemaType.doValidate (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1349:7)
        at C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\document.js:3004:18
        at process.processTicksAndRejections (node:internal/process/task_queues:77:11) {
      properties: {
        validator: [Function (anonymous)],
        message: 'Path `name` (`Rose`) is shorter than the minimum allowed length (5).',
        type: 'minlength',
        minlength: 5,
        path: 'name',
        fullPath: undefined,
        value: 'Rose'
      },
      kind: 'minlength',
      path: 'name',
      value: 'Rose',
      reason: undefined,
      [Symbol(mongoose:validatorError)]: true
    }
  },
  _message: 'User validation failed',
  level: 'error',
  message: 'User validation failed: name: Path `name` (`Rose`) is shorter than the minimum allowed length (5). User validation failed: name: Path `name` (`Rose`) is shorter than the minimum allowed length (5).',
  stack: 'ValidationError: User validation failed: name: Path `name` (`Rose`) is shorter than the minimum allowed length (5).\n' +
    '    at Document.invalidate (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:3219:32)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\document.js:3012:17\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1368:9\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)',
  timestamp: '2024-12-26 23:39:15'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 23:47:02'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 23:47:02'
}
{
  status: 400,
  message: 'Invalid Credentials Invalid Credentials',
  level: 'error',
  timestamp: '2024-12-26 23:47:17'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-26 23:58:59'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-26 23:58:59'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 00:00:30'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 00:00:31'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 00:01:08'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 00:01:08'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-27 00:01:27'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-27 00:01:28'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-27 00:01:28'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-27 00:01:28'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 00:01:31'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 00:01:31'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-27 00:01:32'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-27 00:01:53'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-27 00:03:00'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-27 00:03:00'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-27 00:03:06'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-27 00:07:03'
}
{
  stringValue: '"undefined"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'undefined',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\messages.js:8:20)',
  timestamp: '2024-12-27 00:07:52'
}
{
  stringValue: '"undefined"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'undefined',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\messages.js:8:20)',
  timestamp: '2024-12-27 00:07:52'
}
{
  stringValue: '"undefined"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'undefined',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\messages.js:8:20)',
  timestamp: '2024-12-27 00:07:53'
}
{
  stringValue: '"undefined"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'undefined',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\messages.js:8:20)',
  timestamp: '2024-12-27 00:07:53'
}
{
  stringValue: '"undefined"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'undefined',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\messages.js:8:20)',
  timestamp: '2024-12-27 00:07:57'
}
{
  stringValue: '"undefined"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'undefined',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\messages.js:8:20)',
  timestamp: '2024-12-27 00:08:03'
}
{
  stringValue: '"undefined"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'undefined',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\messages.js:8:20)',
  timestamp: '2024-12-27 00:08:03'
}
{
  stringValue: '"undefined"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'undefined',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\messages.js:8:20)',
  timestamp: '2024-12-27 00:08:03'
}
{
  stringValue: '"undefined"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'undefined',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\messages.js:8:20)',
  timestamp: '2024-12-27 00:08:03'
}
{
  stringValue: '"undefined"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'undefined',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\messages.js:8:20)',
  timestamp: '2024-12-27 00:08:06'
}
{
  stringValue: '"undefined"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'undefined',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\messages.js:8:20)',
  timestamp: '2024-12-27 00:08:11'
}
{
  stringValue: '"undefined"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'undefined',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\messages.js:8:20)',
  timestamp: '2024-12-27 00:09:04'
}
{
  stringValue: '"undefined"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'undefined',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\controllers\\messages.js:8:20)',
  timestamp: '2024-12-27 00:09:07'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 00:10:58'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 00:10:58'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 02:26:40'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 02:26:40'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 02:27:57'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 02:27:57'
}
{
  error: TypeError: Cannot read properties of undefined (reading 'emit')
      at Socket.<anonymous> (C:\Uni and Practise\html,css,js\chat-app\server\startup\sockets.js:36:34)
      at Socket.emit (node:events:514:28)
      at Socket.emitUntyped (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\socket.io\dist\typed-events.js:69:22)
      at C:\Uni and Practise\html,css,js\chat-app\server\node_modules\socket.io\dist\socket.js:697:39
      at process.processTicksAndRejections (node:internal/process/task_queues:77:11),
  level: 'error',
  message: "unhandledRejection: Cannot read properties of undefined (reading 'emit')\n" +
    "TypeError: Cannot read properties of undefined (reading 'emit')\n" +
    '    at Socket.<anonymous> (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\startup\\sockets.js:36:34)\n' +
    '    at Socket.emit (node:events:514:28)\n' +
    '    at Socket.emitUntyped (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\socket.io\\dist\\typed-events.js:69:22)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\socket.io\\dist\\socket.js:697:39\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)',
  stack: "TypeError: Cannot read properties of undefined (reading 'emit')\n" +
    '    at Socket.<anonymous> (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\startup\\sockets.js:36:34)\n' +
    '    at Socket.emit (node:events:514:28)\n' +
    '    at Socket.emitUntyped (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\socket.io\\dist\\typed-events.js:69:22)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\socket.io\\dist\\socket.js:697:39\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)',
  rejection: true,
  date: 'Fri Dec 27 2024 02:32:23 GMT+0500 (Pakistan Standard Time)',
  process: {
    pid: 18456,
    uid: null,
    gid: null,
    cwd: 'C:\\Uni and Practise\\html,css,js\\chat-app\\server',
    execPath: 'C:\\Program Files\\nodejs\\node.exe',
    version: 'v18.17.0',
    argv: [
      'C:\\Program Files\\nodejs\\node.exe',
      'C:\\Uni and Practise\\html,css,js\\chat-app\\server\\index.js'
    ],
    memoryUsage: {
      rss: 71958528,
      heapTotal: 33083392,
      heapUsed: 30949272,
      external: 19309157,
      arrayBuffers: 18341388
    }
  },
  os: { loadavg: [ 0, 0, 0 ], uptime: 85988.546 },
  trace: [
    {
      column: 34,
      file: 'C:\\Uni and Practise\\html,css,js\\chat-app\\server\\startup\\sockets.js',
      function: null,
      line: 36,
      method: null,
      native: false
    },
    {
      column: 28,
      file: 'node:events',
      function: 'Socket.emit',
      line: 514,
      method: 'emit',
      native: false
    },
    {
      column: 22,
      file: 'C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\socket.io\\dist\\typed-events.js',
      function: 'Socket.emitUntyped',
      line: 69,
      method: 'emitUntyped',
      native: false
    },
    {
      column: 39,
      file: 'C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\socket.io\\dist\\socket.js',
      function: null,
      line: 697,
      method: null,
      native: false
    },
    {
      column: 11,
      file: 'node:internal/process/task_queues',
      function: 'process.processTicksAndRejections',
      line: 77,
      method: 'processTicksAndRejections',
      native: false
    }
  ],
  timestamp: '2024-12-27 02:32:23'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 02:33:32'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 02:33:33'
}
{
  error: TypeError: Cannot read properties of undefined (reading 'emit')
      at Socket.<anonymous> (C:\Uni and Practise\html,css,js\chat-app\server\startup\sockets.js:36:34)
      at Socket.emit (node:events:514:28)
      at Socket.emitUntyped (C:\Uni and Practise\html,css,js\chat-app\server\node_modules\socket.io\dist\typed-events.js:69:22)
      at C:\Uni and Practise\html,css,js\chat-app\server\node_modules\socket.io\dist\socket.js:697:39
      at process.processTicksAndRejections (node:internal/process/task_queues:77:11),
  level: 'error',
  message: "unhandledRejection: Cannot read properties of undefined (reading 'emit')\n" +
    "TypeError: Cannot read properties of undefined (reading 'emit')\n" +
    '    at Socket.<anonymous> (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\startup\\sockets.js:36:34)\n' +
    '    at Socket.emit (node:events:514:28)\n' +
    '    at Socket.emitUntyped (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\socket.io\\dist\\typed-events.js:69:22)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\socket.io\\dist\\socket.js:697:39\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)',
  stack: "TypeError: Cannot read properties of undefined (reading 'emit')\n" +
    '    at Socket.<anonymous> (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\startup\\sockets.js:36:34)\n' +
    '    at Socket.emit (node:events:514:28)\n' +
    '    at Socket.emitUntyped (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\socket.io\\dist\\typed-events.js:69:22)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\socket.io\\dist\\socket.js:697:39\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)',
  rejection: true,
  date: 'Fri Dec 27 2024 02:34:15 GMT+0500 (Pakistan Standard Time)',
  process: {
    pid: 4848,
    uid: null,
    gid: null,
    cwd: 'C:\\Uni and Practise\\html,css,js\\chat-app\\server',
    execPath: 'C:\\Program Files\\nodejs\\node.exe',
    version: 'v18.17.0',
    argv: [
      'C:\\Program Files\\nodejs\\node.exe',
      'C:\\Uni and Practise\\html,css,js\\chat-app\\server\\index.js'
    ],
    memoryUsage: {
      rss: 71778304,
      heapTotal: 33083392,
      heapUsed: 30741080,
      external: 19317771,
      arrayBuffers: 18350002
    }
  },
  os: { loadavg: [ 0, 0, 0 ], uptime: 86100.671 },
  trace: [
    {
      column: 34,
      file: 'C:\\Uni and Practise\\html,css,js\\chat-app\\server\\startup\\sockets.js',
      function: null,
      line: 36,
      method: null,
      native: false
    },
    {
      column: 28,
      file: 'node:events',
      function: 'Socket.emit',
      line: 514,
      method: 'emit',
      native: false
    },
    {
      column: 22,
      file: 'C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\socket.io\\dist\\typed-events.js',
      function: 'Socket.emitUntyped',
      line: 69,
      method: 'emitUntyped',
      native: false
    },
    {
      column: 39,
      file: 'C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\socket.io\\dist\\socket.js',
      function: null,
      line: 697,
      method: null,
      native: false
    },
    {
      column: 11,
      file: 'node:internal/process/task_queues',
      function: 'process.processTicksAndRejections',
      line: 77,
      method: 'processTicksAndRejections',
      native: false
    }
  ],
  timestamp: '2024-12-27 02:34:15'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 02:35:25'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 02:35:25'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 02:35:31'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 02:35:31'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 02:36:22'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 02:36:23'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 02:36:33'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 02:36:33'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 02:38:46'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 02:38:46'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 02:40:08'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 02:40:08'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 02:44:49'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 02:44:49'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 02:45:07'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 02:45:07'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 02:45:16'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 02:45:16'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 02:47:28'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 02:47:28'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 02:48:34'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 02:48:34'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 02:49:13'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 02:49:13'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 02:52:18'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 02:52:18'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 02:55:08'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 02:55:08'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 02:56:28'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 02:56:28'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 03:02:28'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 03:02:28'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 03:09:53'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 03:09:53'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 03:10:06'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 03:10:06'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 03:10:07'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 03:10:07'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 03:10:13'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 03:10:13'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 03:10:18'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 03:10:18'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 03:10:20'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 03:10:20'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 03:10:22'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 03:10:22'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 03:12:29'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 03:12:29'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 03:12:44'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 03:12:44'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 03:14:07'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 03:14:07'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 03:15:06'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 03:15:06'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 03:17:12'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 03:17:12'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 03:17:42'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 03:17:42'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 03:17:56'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 03:17:56'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 03:22:51'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 03:22:51'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 03:27:55'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 03:27:55'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 18:47:15'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 18:47:15'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 18:47:34'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 18:47:34'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 19:02:48'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 19:02:48'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 19:03:57'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 19:03:57'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 19:11:55'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 19:11:55'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 19:35:36'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 19:35:37'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 19:37:11'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 19:37:11'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 19:42:46'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 19:42:46'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 19:45:03'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 19:45:03'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 19:48:04'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 19:48:04'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 19:48:56'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 19:48:56'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 19:49:36'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 19:49:36'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 19:50:24'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 19:50:24'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 19:50:41'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 19:50:42'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 19:50:44'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 19:50:44'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 20:16:48'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 20:16:48'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 20:17:19'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 20:17:19'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 20:18:40'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 20:18:40'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 20:19:28'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 20:19:28'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 20:19:37'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 20:19:37'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 20:20:25'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 20:20:25'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 20:20:57'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 20:20:57'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 20:26:01'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 20:26:01'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 20:29:42'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 20:29:42'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 20:56:27'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 20:56:27'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 21:22:50'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 21:22:50'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 21:31:37'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 21:31:37'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 21:32:01'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 21:32:01'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 21:33:11'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 21:33:11'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 21:42:51'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 21:42:51'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 21:53:54'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 21:53:54'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-27 21:54:37'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-27 21:54:37'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 20:29:24'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 20:29:24'
}
{
  name: 'TokenExpiredError',
  message: 'jwt expired jwt expired',
  expiredAt: 2024-12-29T06:47:21.000Z,
  level: 'error',
  stack: 'TokenExpiredError: jwt expired\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\jsonwebtoken\\verify.js:190:21\n' +
    '    at getSecret (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\jsonwebtoken\\verify.js:97:14)\n' +
    '    at module.exports [as verify] (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\jsonwebtoken\\verify.js:101:10)\n' +
    '    at authenticate (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\middlewares\\authenticate.js:8:23)\n' +
    '    at newFn (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at next (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express\\lib\\router\\route.js:149:13)\n' +
    '    at Route.dispatch (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express\\lib\\router\\route.js:119:3)\n' +
    '    at newFn (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express\\lib\\router\\layer.js:95:5)',
  timestamp: '2024-12-30 20:29:37'
}
{
  name: 'TokenExpiredError',
  message: 'jwt expired jwt expired',
  expiredAt: 2024-12-29T06:47:21.000Z,
  level: 'error',
  stack: 'TokenExpiredError: jwt expired\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\jsonwebtoken\\verify.js:190:21\n' +
    '    at getSecret (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\jsonwebtoken\\verify.js:97:14)\n' +
    '    at module.exports [as verify] (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\jsonwebtoken\\verify.js:101:10)\n' +
    '    at authenticate (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\middlewares\\authenticate.js:8:23)\n' +
    '    at newFn (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at next (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express\\lib\\router\\route.js:149:13)\n' +
    '    at Route.dispatch (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express\\lib\\router\\route.js:119:3)\n' +
    '    at newFn (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express\\lib\\router\\layer.js:95:5)',
  timestamp: '2024-12-30 20:29:37'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 20:47:50'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 20:47:50'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 20:52:30'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 20:52:30'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 20:53:53'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 20:53:54'
}
{
  name: 'TokenExpiredError',
  message: 'jwt expired jwt expired',
  expiredAt: 2024-12-30T05:55:19.000Z,
  level: 'error',
  stack: 'TokenExpiredError: jwt expired\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\jsonwebtoken\\verify.js:190:21\n' +
    '    at getSecret (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\jsonwebtoken\\verify.js:97:14)\n' +
    '    at module.exports [as verify] (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\jsonwebtoken\\verify.js:101:10)\n' +
    '    at authenticate (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\middlewares\\authenticate.js:8:23)\n' +
    '    at newFn (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at next (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express\\lib\\router\\route.js:149:13)\n' +
    '    at Route.dispatch (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express\\lib\\router\\route.js:119:3)\n' +
    '    at newFn (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express\\lib\\router\\layer.js:95:5)',
  timestamp: '2024-12-30 20:54:51'
}
{
  name: 'TokenExpiredError',
  message: 'jwt expired jwt expired',
  expiredAt: 2024-12-30T05:55:19.000Z,
  level: 'error',
  stack: 'TokenExpiredError: jwt expired\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\jsonwebtoken\\verify.js:190:21\n' +
    '    at getSecret (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\jsonwebtoken\\verify.js:97:14)\n' +
    '    at module.exports [as verify] (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\jsonwebtoken\\verify.js:101:10)\n' +
    '    at authenticate (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\middlewares\\authenticate.js:8:23)\n' +
    '    at newFn (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at next (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express\\lib\\router\\route.js:149:13)\n' +
    '    at Route.dispatch (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express\\lib\\router\\route.js:119:3)\n' +
    '    at newFn (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\express\\lib\\router\\layer.js:95:5)',
  timestamp: '2024-12-30 20:54:51'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 21:11:11'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 21:11:11'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 21:11:27'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 21:11:27'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 21:11:39'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 21:11:39'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 21:11:51'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 21:11:51'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 21:12:04'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 21:12:04'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 21:36:29'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 21:36:29'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 21:37:19'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 21:37:19'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 21:38:07'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 21:38:07'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 21:39:55'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 21:39:55'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 21:40:45'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 21:40:45'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 21:40:57'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 21:40:57'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 22:23:44'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 22:23:44'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 22:24:38'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 22:24:38'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 22:25:22'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 22:25:22'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 22:25:36'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 22:25:36'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 22:25:45'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 22:25:45'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 22:27:29'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 22:27:29'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 22:27:51'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 22:27:51'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 22:29:52'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 22:29:52'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 22:31:06'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 22:31:06'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 22:31:30'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 22:31:30'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 22:34:27'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 22:34:27'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 22:42:15'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 22:42:15'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 22:42:18'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 22:42:18'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 22:44:33'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 22:44:33'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 22:44:35'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 22:44:35'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-30 23:56:28'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-30 23:56:28'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 16:12:40'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 16:12:40'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 20:44:58'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 20:44:58'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 20:46:21'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 20:46:21'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 21:04:37'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:04:37'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 21:05:47'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:05:47'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:09:25'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:09:29'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:10:16'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:10:19'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 21:11:22'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:11:22'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 21:13:29'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:13:29'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 21:13:41'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:13:41'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 21:13:50'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:13:50'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 21:13:58'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:13:58'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 21:14:54'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:14:54'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 21:28:16'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:28:16'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 21:29:30'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:29:30'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 21:29:37'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:29:37'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 21:32:40'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:32:40'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 21:32:44'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:32:44'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 21:33:25'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:33:25'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 21:44:45'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 21:44:45'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 21:59:09'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 21:59:09'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 21:59:19'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 21:59:23'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 21:59:36'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:02:52'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:02:52'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 22:03:05'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:10:18'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:10:18'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 22:10:21'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:10:29'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:10:29'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:21:24'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:21:24'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:21:26'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:21:26'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:21:36'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:21:36'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 22:23:06'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:24:40'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:24:40'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 22:24:50'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:25:10'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:25:10'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 22:25:25'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 22:30:06'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 22:31:11'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:35:18'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:35:18'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:35:26'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:35:26'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 22:35:34'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 22:35:47'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:36:06'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:36:06'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 22:36:06'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 22:36:33'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:37:40'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:37:40'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 22:37:49'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:38:55'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:38:55'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:39:04'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:39:04'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:40:11'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:40:11'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 22:40:22'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:40:37'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:40:37'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:42:33'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:42:33'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:44:49'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:44:49'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:47:57'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:47:57'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:49:23'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:49:23'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:50:22'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:50:22'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:52:48'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:52:48'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:55:16'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:55:16'
}
{
  name: 'TokenError',
  message: 'Bad Request Bad Request',
  code: 'invalid_grant',
  uri: undefined,
  status: 500,
  level: 'error',
  stack: 'TokenError: Bad Request\n' +
    '    at OAuth2Strategy.parseErrorResponse (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\passport-oauth2\\lib\\strategy.js:373:12)\n' +
    '    at OAuth2Strategy._createOAuthError (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\passport-oauth2\\lib\\strategy.js:420:16)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\passport-oauth2\\lib\\strategy.js:177:45\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\oauth\\lib\\oauth2.js:196:18\n' +
    '    at passBackControl (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\oauth\\lib\\oauth2.js:132:9)\n' +
    '    at IncomingMessage.<anonymous> (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\oauth\\lib\\oauth2.js:157:7)\n' +
    '    at IncomingMessage.emit (node:events:526:35)\n' +
    '    at endReadableNT (node:internal/streams/readable:1359:12)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)',
  timestamp: '2024-12-31 22:55:16'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 22:55:16'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 22:55:47'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 22:55:47'
}
{
  level: 'error',
  message: 'Login sessions require session support. Did you forget to use `express-session` middleware? Login sessions require session support. Did you forget to use `express-session` middleware?',
  stack: 'Error: Login sessions require session support. Did you forget to use `express-session` middleware?\n' +
    '    at SessionManager.logIn (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\passport\\lib\\sessionmanager.js:21:33)\n' +
    '    at req.login.req.logIn (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\passport\\lib\\http\\request.js:39:26)\n' +
    '    at strategy.success (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\passport\\lib\\middleware\\authenticate.js:265:13)\n' +
    '    at verified (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\passport-oauth2\\lib\\strategy.js:189:20)\n' +
    '    at Strategy._verify (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\passport.js:16:14)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\passport-oauth2\\lib\\strategy.js:205:24\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\passport-google-oauth20\\lib\\strategy.js:122:5\n' +
    '    at passBackControl (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\oauth\\lib\\oauth2.js:134:9)\n' +
    '    at IncomingMessage.<anonymous> (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\oauth\\lib\\oauth2.js:157:7)\n' +
    '    at IncomingMessage.emit (node:events:526:35)',
  timestamp: '2024-12-31 22:56:20'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 23:12:29'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 23:12:29'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 23:12:32'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 23:12:32'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 23:15:30'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 23:15:30'
}
{
  level: 'error',
  message: 'Login sessions require session support. Did you forget to use `express-session` middleware? Login sessions require session support. Did you forget to use `express-session` middleware?',
  stack: 'Error: Login sessions require session support. Did you forget to use `express-session` middleware?\n' +
    '    at SessionManager.logIn (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\passport\\lib\\sessionmanager.js:21:33)\n' +
    '    at req.login.req.logIn (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\passport\\lib\\http\\request.js:39:26)\n' +
    '    at strategy.success (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\passport\\lib\\middleware\\authenticate.js:265:13)\n' +
    '    at verified (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\passport-oauth2\\lib\\strategy.js:189:20)\n' +
    '    at Strategy._verify (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\passport.js:34:9)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\passport-oauth2\\lib\\strategy.js:205:24\n' +
    '    at C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\passport-google-oauth20\\lib\\strategy.js:122:5\n' +
    '    at passBackControl (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\oauth\\lib\\oauth2.js:134:9)\n' +
    '    at IncomingMessage.<anonymous> (C:\\Uni and Practise\\html,css,js\\chat-app\\server\\node_modules\\oauth\\lib\\oauth2.js:157:7)\n' +
    '    at IncomingMessage.emit (node:events:526:35)',
  timestamp: '2024-12-31 23:18:37'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 23:19:30'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 23:19:30'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 23:19:49'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 23:20:30'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 23:20:30'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 23:20:44'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 23:23:03'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 23:23:03'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 23:23:56'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 23:23:56'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 23:24:03'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 23:24:03'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2024-12-31 23:24:10'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 23:25:00'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 23:25:00'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 23:25:28'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 23:25:28'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 23:27:37'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 23:27:37'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 23:31:27'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 23:31:27'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2024-12-31 23:32:12'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2024-12-31 23:32:12'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 01:03:03'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 01:03:03'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 01:03:09'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 01:03:09'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 17:24:07'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 17:24:07'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2025-01-01 17:26:48'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 18:54:00'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 18:54:00'
}
{
  status: 404,
  message: 'Route not found Route not found',
  level: 'error',
  timestamp: '2025-01-01 18:54:35'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:25:37'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:25:37'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:25:47'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:25:47'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:26:38'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:26:38'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:32:54'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:32:54'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:37:55'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:37:55'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:39:30'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:39:30'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:39:45'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:39:45'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:39:48'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:39:48'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:39:54'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:39:54'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:41:39'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:41:39'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:42:06'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:42:06'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:44:26'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:44:26'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:47:55'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:47:55'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:48:29'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:48:29'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:48:34'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:48:34'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:50:35'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:50:35'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:50:45'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:50:45'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:50:50'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:50:50'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 19:51:03'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 19:51:03'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 20:29:18'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 20:29:18'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 20:29:26'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 20:29:26'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 20:35:08'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 20:35:08'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 20:35:13'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 20:35:13'
}
{
  errors: {
    email: ValidatorError: Path `email` is required.
        at validate (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schematype.js:1365:13)
        at SchemaType.doValidate (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schematype.js:1349:7)
        at C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\document.js:3004:18
        at process.processTicksAndRejections (node:internal/process/task_queues:77:11) {
      properties: {
        validator: [Function (anonymous)],
        message: 'Path `email` is required.',
        type: 'required',
        path: 'email',
        fullPath: undefined,
        value: undefined
      },
      kind: 'required',
      path: 'email',
      value: undefined,
      reason: undefined,
      [Symbol(mongoose:validatorError)]: true
    }
  },
  _message: 'User validation failed',
  level: 'error',
  message: 'User validation failed: email: Path `email` is required. User validation failed: email: Path `email` is required.',
  stack: 'ValidationError: User validation failed: email: Path `email` is required.\n' +
    '    at Document.invalidate (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\document.js:3219:32)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\document.js:3012:17\n' +
    '    at C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schematype.js:1368:9\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)',
  timestamp: '2025-01-01 20:36:04'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 20:36:56'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 20:36:56'
}
{
  errors: {
    email: ValidatorError: Path `email` is required.
        at validate (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schematype.js:1365:13)
        at SchemaType.doValidate (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schematype.js:1349:7)
        at C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\document.js:3004:18
        at process.processTicksAndRejections (node:internal/process/task_queues:77:11) {
      properties: {
        validator: [Function (anonymous)],
        message: 'Path `email` is required.',
        type: 'required',
        path: 'email',
        fullPath: undefined,
        value: undefined
      },
      kind: 'required',
      path: 'email',
      value: undefined,
      reason: undefined,
      [Symbol(mongoose:validatorError)]: true
    }
  },
  _message: 'User validation failed',
  level: 'error',
  message: 'User validation failed: email: Path `email` is required. User validation failed: email: Path `email` is required.',
  stack: 'ValidationError: User validation failed: email: Path `email` is required.\n' +
    '    at Document.invalidate (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\document.js:3219:32)\n' +
    '    at C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\document.js:3012:17\n' +
    '    at C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schematype.js:1368:9\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)',
  timestamp: '2025-01-01 20:37:08'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 20:38:10'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 20:38:10'
}
{
  status: 404,
  message: 'This account is socially registered and has no password set This account is socially registered and has no password set',
  level: 'error',
  timestamp: '2025-01-01 20:38:49'
}
{
  status: 404,
  message: 'This account is socially registered and has no password set This account is socially registered and has no password set',
  level: 'error',
  timestamp: '2025-01-01 20:38:52'
}
{
  status: 404,
  message: 'This account is socially registered and has no password set This account is socially registered and has no password set',
  level: 'error',
  timestamp: '2025-01-01 20:38:54'
}
{
  status: 404,
  message: 'This account is socially registered and has no password set This account is socially registered and has no password set',
  level: 'error',
  timestamp: '2025-01-01 20:38:58'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 20:43:08'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 20:43:08'
}
{
  stringValue: '"undefined"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'undefined',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "undefined" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\controllers\\messages.js:8:20)',
  timestamp: '2025-01-01 20:44:51'
}
{
  message: 'Listening on PORT: 5001 !',
  level: 'info',
  timestamp: '2025-01-01 20:45:58'
}
{
  message: 'Connected to MongoDB',
  level: 'info',
  timestamp: '2025-01-01 20:45:58'
}
{
  stringValue: '"null"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'null',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "null" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "null" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "null" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\controllers\\messages.js:8:20)',
  timestamp: '2025-01-01 20:46:20'
}
{
  stringValue: '"null"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'null',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "null" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "null" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "null" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\controllers\\messages.js:8:20)',
  timestamp: '2025-01-01 21:46:12'
}
{
  stringValue: '"null"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'null',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "null" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "null" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "null" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\controllers\\messages.js:8:20)',
  timestamp: '2025-01-01 21:46:35'
}
{
  stringValue: '"null"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'null',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "null" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "null" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "null" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\controllers\\messages.js:8:20)',
  timestamp: '2025-01-01 21:46:51'
}
{
  stringValue: '"null"',
  messageFormat: undefined,
  kind: 'ObjectId',
  value: 'null',
  path: 'room',
  reason: BSONError: Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer
      at new ObjectId (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\bson\lib\bson.cjs:2055:23)
      at castObjectId (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\cast\objectid.js:25:12)
      at ObjectId.cast (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schema\objectid.js:248:12)
      at SchemaType.applySetters (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schematype.js:1219:12)
      at SchemaType.castForQuery (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\schematype.js:1633:15)
      at cast (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\cast.js:389:32)
      at Query.cast (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:4927:12)
      at Query._castConditions (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:2237:10)
      at model.Query._find (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:2263:8)
      at model.Query.exec (C:\Uni and Practise\html,css,js\auth-and-sockets-practise\server\node_modules\mongoose\lib\query.js:4447:28),
  valueType: 'string',
  model: Model { Message },
  level: 'error',
  message: 'Cast to ObjectId failed for value "null" (type string) at path "room" for model "Message" Cast to ObjectId failed for value "null" (type string) at path "room" for model "Message"',
  stack: 'CastError: Cast to ObjectId failed for value "null" (type string) at path "room" for model "Message"\n' +
    '    at ObjectId.cast (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schema\\objectid.js:250:11)\n' +
    '    at SchemaType.applySetters (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schematype.js:1219:12)\n' +
    '    at SchemaType.castForQuery (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\schematype.js:1633:15)\n' +
    '    at cast (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\cast.js:389:32)\n' +
    '    at Query.cast (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:4927:12)\n' +
    '    at Query._castConditions (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:2237:10)\n' +
    '    at model.Query._find (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:2263:8)\n' +
    '    at model.Query.exec (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\node_modules\\mongoose\\lib\\query.js:4447:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n' +
    '    at async getRoomMessages (C:\\Uni and Practise\\html,css,js\\auth-and-sockets-practise\\server\\controllers\\messages.js:8:20)',
  timestamp: '2025-01-01 21:46:59'
}
